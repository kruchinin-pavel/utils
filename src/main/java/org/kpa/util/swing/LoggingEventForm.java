package org.kpa.util.swing;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import static org.kpa.util.swing.Helper.swingLater;


/**
 * Created with IntelliJ IDEA.
 * User: krucpav
 * Date: 6/2/13
 * Time: 8:05 PM
 * To change this template use File | Settings | File Templates.
 */
public class LoggingEventForm extends JFrame {
    private JButton bntHide;
    private JTextPane textPane1;
    private JPanel rootPanel;
    private JCheckBox cbBringOnTop;
    private int code = -1;
    private static final Logger log = LoggerFactory.getLogger(LoggingEventForm.class);

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
        if (code != -1) {
            Thread thread = new Thread(() -> {
                try {
                    long upTime = System.currentTimeMillis() + 30000;
                    while (System.currentTimeMillis() < upTime) {
                        Thread.sleep(1000);
                        swingLater(() -> setTitle("Сообщения: Закроется " +
                                (upTime - System.currentTimeMillis()) / 1000 + "сек."));
                    }
                    System.exit(code);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            });
            thread.setDaemon(true);
            thread.start();
            swingLater(() -> {
                bntHide.setText("Закрыть");
                cbBringOnTop.setVisible(false);
                if (!isVisible()) {
                    setLocationRelativeTo(null);
                    setVisible(true);
                }
            });
        }
    }

    public LoggingEventForm() throws HeadlessException {
        super("Сообщения: ");
        setContentPane(rootPanel);
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        bntHide.addActionListener(e ->
                swingLater(() -> dispatchEvent(new WindowEvent(LoggingEventForm.this, WindowEvent.WINDOW_CLOSING))));
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (code == -1) return;
                swingLater(() -> {
                    log.info("Calling exit on code={}", code);
                    dispose();
                    System.exit(code);
                });
            }
        });
        rootPanel.registerKeyboardAction(e -> setVisible(false),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    public void addMessage(String text) {
        if (!textPane1.getText().equals(text)) {
            textPane1.setText(text);
        }
    }

    public boolean shouldBeOnTop() {
        return cbBringOnTop.isSelected();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setBorder(BorderFactory.createTitledBorder("Сообщение об ошибках(предупреждениях)"));
        bntHide = new JButton();
        bntHide.setText("Скрыть");
        rootPanel.add(bntHide, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        rootPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(400, 150), null, null, 0, false));
        textPane1 = new JTextPane();
        scrollPane1.setViewportView(textPane1);
        final JLabel label1 = new JLabel();
        label1.setText("Ошибки в работе паспорта:");
        rootPanel.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("");
        rootPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        cbBringOnTop = new JCheckBox();
        cbBringOnTop.setSelected(true);
        cbBringOnTop.setText("Держать наверху");
        rootPanel.add(cbBringOnTop, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
